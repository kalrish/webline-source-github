---
AWSTemplateFormatVersion: 2010-09-09


Description: Event handler for pull requests


Metadata:
   AWS::CloudFormation::Interface:
      ParameterGroups:
         -
            Label: webpipe
            Parameters:
               - WebpipeBucket
         -
            Label: Lambda package
            Parameters:
               - LambdaPackagesBucket
               - LambdaFunctionPackageObjectVersion

      ParameterLabels:
         LambdaPackagesBucket:
            default: Bucket
         LambdaFunctionPackageObjectVersion:
            default: Object version
         WebpipeBucket:
            default: Bucket


Parameters:
   LambdaPackagesBucket:
      Description: Name of the S3 bucket that contains the Lambda deployment package.
      Type: String

   LambdaFunctionPackageObjectVersion:
      Description: ID of the version of the S3 object to use as Lambda deployment package.
      Type: String

   WebpipeBucket:
      Description: Name of the S3 bucket that contains the webpipe CloudFormation stack templates.
      Type: String


Resources:
   Role:
      Type: AWS::IAM::Role
      Properties: {
         AssumeRolePolicyDocument: {
            Version: 2012-10-17,
            Statement: [
               {
                  Principal: {
                     Service: [
                        {
                           'Fn::Sub': 'lambda.${AWS::URLSuffix}',
                        },
                     ],
                  },
                  Action: [
                     'sts:AssumeRole',
                  ],
                  Effect: Allow,
               },
            ],
         },
         ManagedPolicies: [
            {
               'Fn::Sub': 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
            },
         ],
         Policies: [
            {
               PolicyName: abroad,
               PolicyDocument: {
                  Version: 2012-10-17,
                  Statement: [
                     {
                        Action: [
                           'sts:AssumeRole',
                        ],
                        Resource: [
                           {
                              'Fn::Sub': 'arn:${AWS::Partition}:iam::*:role/webpipe/foothold/*'
                           },
                        ],
                        Effect: Allow,
                     },
                  ],
               },
            },
         ],
      }

   Function:
      Type: AWS::Lambda::Function
      Properties: {
         Code: {
            S3Bucket: {
               Ref: LambdaPackagesBucket,
            },
            S3Key: functions/events/pr.zip,
         },
         Handler: index.handler,
         Layers: [
            {
               Ref: OctokitLibrary,
            },
         ],
         Role: {
            'Fn::GetAtt': [
               Role,
               Arn,
            ]
         },
         Runtime: ruby2.5,
      }

   Permission:
      Type: AWS::Lambda::Permission
      Properties: {
         Principal: {
            'Fn::Sub': 'sns.${AWS::URLSuffix}',
         },
         SourceArn: {
            Ref: EventsTopic,
         },
         Action: [
            'lambda:InvokeFunction',
         ],
         FunctionName: {
            Ref: Alias,
         },
      }

   Subscription:
      Type: AWS::SNS::Subscription
      DependsOn: [
         Permission,
      ],
      Properties: {
         TopicArn: {
            Ref: EventsTopic,
         },
         FilterPolicy: {
            event: [
               # FIXME
               InstallationEvent,
               RepositoryInstallationEvent,
            ],
         },
         Protocol: lambda,
         Endpoint: {
            Ref: Alias,
         },
      }
